{"version":3,"sources":["assets/images/logo-big.svg","store/chosenLocation.js","store/forecast.js","utils/utils.js","components/SelectCustom.js","store/userLocation.js","components/UserLocationButton.js","components/LocationForm.js","pages/Home.js","components/CurrentWeather.js","components/Forecast.js","assets/images/cloud-simple.svg","components/Preloader.js","pages/Card.js","App.js","store/index.js","index.js"],"names":["fetchChosenLocationSuccess","location","type","payload","fetchChosenLocation","id","dispatch","a","fetch","response","json","error","initialState","pending","data","fetchForecast","getReadableDateTime","dailyTimeStampSec","date","Date","hours","getHours","minutes","getMinutes","getDate","fullDay","getDay","day","formatTemperature","temp","Math","round","DropdownIndicator","props","IndicatorSeparator","city","SelectCustom","storageName","isDataPending","useState","showMenu","fetchedLocationInput","setFetchedLocationInput","history","useHistory","isFetchingWeather","useSelector","state","forecast","useDispatch","defaultOptions","JSON","parse","localStorage","getItem","handleGetResults","value","fetchCityInput","then","cod","label","name","sys","country","useEffect","push","className","classNamePrefix","placeholder","isLoading","loadOptions","inputValue","trim","length","Promise","resolve","onChange","newItem","updatedHistory","find","item","filter","setItem","stringify","addToLocalStorage","components","getUserLocationError","UserLocationButton","userLocation","onClick","window","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","Error","LocationForm","setIsDataPending","Home","src","logoBig","CurrentWeather","chosenLocation","currentWeatherDateOutput","sunriseDateOutput","sunsetDateOutput","currentWeatherDate","dt","sunriseDate","sunrise","wind","sunsetDate","sunset","main","feels_like","pressure","humidity","speed","Forecast","dailyForecastData","list","reduce","acc","index","array","elem","map","itemDate","itemDateOutput","Preloader","preloader","Card","pageLoaded","setPageLoaded","to","App","exact","path","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8ebb868.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo-big.5210dd0a.svg\";","export function fetchChosenLocationPending() {\n    return {\n        type: \"FETCH_CHOSEN_LOCATION_PENDING\"\n    };\n};\n\nexport function fetchChosenLocationSuccess(location) {\n    return {\n        type: \"FETCH_CHOSEN_LOCATION_SUCCESS\",\n        payload: location\n    };\n};\n\nexport function fetchChosenLocationError(error) {\n    return {\n        type: \"FETCH_CHOSEN_LOCATION_ERROR\",\n        error: error\n    };\n};\n\nexport function fetchChosenLocation({ id }) {\n    return async dispatch => {\n        dispatch(fetchChosenLocationPending());\n        const url = \"http://api.openweathermap.org/data/2.5/weather\";\n        const apiKey = \"cfef6851883684acafd83bd9c8128de5\";\n        try {\n            const response = await fetch(`${url}?id=${id}&appid=${apiKey}&units=metric`);\n            const json = await response.json();\n            dispatch(fetchChosenLocationSuccess(json));\n        } catch(e) {\n            dispatch(fetchChosenLocationError(e));\n        }\n    }\n};\n\nconst initialState = {\n    pending: false,\n    data: null,\n    error: null\n};\n\nexport default function chosenLocationReducer(state = initialState, action) {\n    switch (action.type) {\n        case \"FETCH_CHOSEN_LOCATION_PENDING\":\n            return {\n                ...state,\n                pending: true\n            };\n        case \"FETCH_CHOSEN_LOCATION_SUCCESS\": \n            return {\n                ...state,\n                pending: false,\n                data: action.payload\n            };\n        case \"FETCH_CHOSEN_LOCATION_ERROR\": \n            return {\n                ...state,\n                pending: false,\n                error: action.error\n            };\n        default:\n            return state;\n    }\n};","export function fetchForecastPending() {\n    return {\n        type: \"FETCH_FORECAST_PENDING\"\n    };\n};\n\nexport function fetchForecastSuccess(data) {\n    return {\n        type: \"FETCH_FORECAST_SUCCESS\",\n        payload: data\n    };\n};\n\nexport function fetchForecastError(error) {\n    return {\n        type: \"FETCH_FORECAST_ERROR\",\n        error: error\n    };\n};\n\nexport function fetchForecast({ id }) {\n    return async dispatch => {\n        dispatch(fetchForecastPending());\n        const url = \"http://api.openweathermap.org/data/2.5/forecast\";\n        const apiKey = \"cfef6851883684acafd83bd9c8128de5\";\n        try {\n            const response = await fetch(`${url}?id=${id}&appid=${apiKey}&units=metric`);\n            const json = await response.json();\n            dispatch(fetchForecastSuccess(json));\n        } catch(e) {\n            dispatch(fetchForecastError(e));\n        }\n    };\n};\n\nconst initialState = {\n    pending: false,\n    data: null,\n    error: null\n};\n\nexport default function forecastReducer(state = initialState, action) {\n    switch (action.type) {\n        case \"FETCH_FORECAST_PENDING\":\n            return {\n                ...state,\n                pending: true\n            };\n        case \"FETCH_FORECAST_SUCCESS\":\n            return {\n                ...state,\n                pending: false,\n                data: action.payload\n            };\n        case \"FETCH_FORECAST_ERROR\":\n            return {\n                ...state,\n                pending: false,\n                error: action.error\n            };\n        default: \n            return state; \n    }\n};","export function getReadableDateTime(dailyTimeStampSec) {\n    const date = new Date(dailyTimeStampSec * 1000);\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    return {\n        date: date.getDate(),\n        fullDay: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][date.getDay()],\n        day: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"][date.getDay()],\n        hours: hours < 10 ? `0${hours}` :  hours,\n        minutes: minutes < 10 ? `0${minutes}` : minutes\n    };\n};\n\nexport function formatTemperature(temp) {\n    return `${Math.round(temp)}°C`;\n};\n\nexport function formatWind(wind) {\n    return `${Math.round(wind.speed)} m/s`;\n};\n\nexport function getDailyForecastData(list) {\n    let filteredByDay = list.reduce((acc, item, index, array) => {\n        if ( ( new Date().getDate() !== getReadableDateTime(item.dt).date )\n             && ( !acc.find(elem => getReadableDateTime(elem.dt).date === getReadableDateTime(item.dt).date)) ) {\n\n            if (getReadableDateTime(item.dt).hours === 14) {\n                return [...acc, item];\n            }\n        }\n        return [...acc];\n    }, []);\n    return filteredByDay;\n};\n\n\nexport function addToLocalStorage(storageName, newItem) {\n    const history = JSON.parse(localStorage.getItem(storageName));\n\n    let updatedHistory = [];\n    if (!history) {\n        updatedHistory.push(newItem);\n    } else {\n        if (history.find(item => item.value === newItem.value)) {\n            updatedHistory = [newItem, ...history.filter(item => item.value !== newItem.value)];\n        } else {\n            updatedHistory = [newItem, ...history];\n            if (updatedHistory.length > 5) {\n                updatedHistory.length = 5;\n            }\n        }\n    }\n\n    localStorage.setItem(storageName, JSON.stringify(updatedHistory));\n}\n\nexport function getFromLocalStorage(storageName) {\n    return JSON.parse(localStorage.getItem(storageName));\n}","import { useEffect, useState } from \"react\";\nimport AsyncSelect from 'react-select/async';\nimport { useHistory } from \"react-router-dom\";\nimport { fetchChosenLocationSuccess, fetchChosenLocation } from \"../store/chosenLocation.js\";\nimport { fetchForecast } from \"../store/forecast.js\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addToLocalStorage, getFromLocalStorage } from \"../utils/utils.js\";\n\nconst DropdownIndicator = (props) => null;\nconst IndicatorSeparator = (props) => null;\n\nasync function fetchCityInput({ city }) {\n    const url = \"http://api.openweathermap.org/data/2.5/weather\";\n    const apiKey = \"cfef6851883684acafd83bd9c8128de5\";\n    const response = await fetch(`${url}?q=${city}&appid=${apiKey}&units=metric`);\n    const json = await response.json();\n    return json;\n}\n\n\nfunction SelectCustom({ isDataPending }) {\n    const [showMenu, setShowMenu] = useState(false);\n    const [fetchedLocationInput, setFetchedLocationInput] = useState({});\n    const history = useHistory();\n    const isFetchingWeather = useSelector(state => state.forecast);\n    const dispatch = useDispatch();\n    const defaultOptions = getFromLocalStorage(\"chosenLocationsHistory\");\n    \n    function handleGetResults(value) {\n        return fetchCityInput({ city: value })\n            .then(response => {\n                if (response.cod === 200) {\n                    setFetchedLocationInput(response);\n                    return [{ value: response.id, label: `${response.name} (${response.sys.country})` }];\n                } else {\n                    return [];\n                }\n            });\n    }\n\n    function promiseOptions(inputValue) {\n        const value = inputValue.trim();\n        if (value.length < 3) {\n            return Promise.resolve();\n        } else {\n            return handleGetResults(value);\n        }\n    }\n\n    function handleChange({ value, label }) {\n        if (fetchedLocationInput.id) {\n            dispatch(fetchChosenLocationSuccess(fetchedLocationInput));\n        } else {\n            dispatch(fetchChosenLocation({ id: value }));\n        }\n        dispatch(fetchForecast({ id: value }));\n        addToLocalStorage('chosenLocationsHistory', { value: value, label: label });\n        history.push(\"/card\");\n    }\n\n    useEffect(() => {\n        if (isFetchingWeather.pending) {\n            history.push(\"/card\");\n        }\n    }, [ isFetchingWeather ]);\n\n    let className = `select${showMenu ? \" select--show-menu\" : \"\"}`;\n    return (\n        <AsyncSelect\n            className={className}\n            classNamePrefix=\"select\"\n            placeholder=\"Search by city...\"\n            isLoading={isDataPending}\n            defaultOptions={defaultOptions}\n            loadOptions={promiseOptions}\n            onChange={handleChange}\n            components={{ DropdownIndicator, IndicatorSeparator }}\n        />\n    );\n}\n\nexport default SelectCustom;","import { fetchChosenLocation } from \"./chosenLocation.js\";\nimport { fetchForecast } from \"./forecast.js\";\n\nexport function getUserLocationPending() {\n    return {\n        type: \"GET_USER_LOCATION_PENDING\"\n    };\n};\n\nexport function getUserLocationSuccess(data) {\n    return {\n        type: \"GET_USER_LOCATION_SUCCESS\",\n        payload: data\n    };\n};\n\nexport function getUserLocationError(error) {\n    return {\n        type: \"GET_USER_LOCATION_ERROR\",\n        error: error\n    };\n};\n\nexport function getUserLocation() {\n    return async dispatch => {\n        if (window.navigator.geolocation) {\n            dispatch(getUserLocationPending());\n            window.navigator.geolocation.getCurrentPosition(({ coords: {latitude, longitude}}) => {\n\n                (async () => {\n                    const url = \"http://api.openweathermap.org/data/2.5/weather\";\n                    const apiKey = \"cfef6851883684acafd83bd9c8128de5\";\n                    try {\n                        const response = await fetch(`${url}?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`);\n                        const json = await response.json();\n                        dispatch(getUserLocationSuccess({ id: json.id }));\n\n                        dispatch(fetchChosenLocation({ id: json.id }));\n                        dispatch(fetchForecast({ id: json.id }));\n                    } catch(e) {\n                        dispatch(getUserLocationError(e));\n                    }\n                })();\n\n            }, error => {\n                dispatch(getUserLocationError(error));\n            });\n        } else {\n            dispatch(getUserLocationError(new Error(\"Can't access the location\")));\n        }\n    };\n};\n\n\nconst initialState = {\n    pending: false,\n    data: null,\n    error: null\n}\n\nexport default function userLocationReducer(state = initialState, action) {\n    switch (action.type) {\n        case \"GET_USER_LOCATION_PENDING\":\n            return {\n                ...state,\n                pending: true\n            };\n        case \"GET_USER_LOCATION_SUCCESS\":\n            return {\n                ...state,\n                pending: false,\n                data: action.payload\n            };\n        case \"GET_USER_LOCATION_ERROR\":\n            return {\n                ...state,\n                pending: false,\n                error: action.error\n            };\n        default:\n            return state;\n    }\n}","import { useSelector, useDispatch } from \"react-redux\";\nimport { getUserLocation } from \"../store/userLocation.js\";\nimport { fetchChosenLocation } from \"../store/chosenLocation.js\";\nimport { fetchForecast } from \"../store/forecast.js\";\n\nfunction UserLocationButton() {\n    const userLocation = useSelector(state => state.userLocation);\n    const dispatch = useDispatch();\n\n    function handleClick() {\n        if (userLocation.data) {\n            dispatch(fetchChosenLocation({ id: userLocation.data.id }));\n            dispatch(fetchForecast({ id: userLocation.data.id }));\n        } else {\n            dispatch(getUserLocation());\n        }\n    }\n\n    return <button type=\"button\" onClick={ handleClick }>Current location</button>;\n}\n\nexport default UserLocationButton;","import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\n\n// components\nimport SelectCustom from \"./SelectCustom.js\";\nimport UserLocationButton from \"./UserLocationButton.js\";\n\nfunction LocationForm() {\n    const [isDataPending, setIsDataPending] = useState(false);\n    const userLocation = useSelector(state => state.userLocation);\n\n    useEffect(() => {\n        if (userLocation.pending) {\n            setIsDataPending(true);\n        } else {\n            setIsDataPending(false);\n        }\n    }, [ userLocation.pending ]);\n\n    const className = `search-form${isDataPending ? \" data-pending\" : \"\"}`;\n\n    return (\n        <form className={className}>\n            <SelectCustom isDataPending={isDataPending} />\n            <UserLocationButton />\n        </form>\n    );\n}\n\nexport default LocationForm;\n","import logoBig from \"../assets/images/logo-big.svg\";\nimport LocationForm from \"../components/LocationForm.js\";\n\nfunction Home() {\n    return (\n        <div className=\"page-wrapper\">\n            <div className=\"page-container\">\n                <img src={logoBig} className=\"logo-big\" />\n                <LocationForm />\n                {/* <code>\n                    {\n                        JSON.stringify({\"coord\":{\"lon\":30.5241,\"lat\":50.4501},\"weather\":[{\"id\":803,\"main\":\"Clouds\",\"description\":\"broken clouds\",\"icon\":\"04n\"}],\"base\":\"stations\",\"main\":{\"temp\":268.15,\"feels_like\":261.24,\"temp_min\":268.15,\"temp_max\":268.15,\"pressure\":1007,\"humidity\":93},\"visibility\":10000,\"wind\":{\"speed\":6,\"deg\":30},\"snow\":{\"1h\":0.1},\"clouds\":{\"all\":75},\"dt\":1612202015,\"sys\":{\"type\":1,\"id\":8903,\"country\":\"UA\",\"sunrise\":1612157572,\"sunset\":1612191000},\"timezone\":7200,\"id\":703448,\"name\":\"Kyiv\",\"cod\":200}, null, 2)\n                    }\n                </code> */}\n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import { useSelector } from \"react-redux\";\nimport { getReadableDateTime, formatTemperature, formatWind } from \"../utils/utils.js\";\n\nfunction CurrentWeather() {\n    const chosenLocation = useSelector(state => state.chosenLocation);\n\n    let currentWeatherDateOutput = \"\";\n    let sunriseDateOutput = \"\";\n    let sunsetDateOutput = \"\";\n\n    if (!chosenLocation.data || chosenLocation.data.cod != 200) {\n        return null;\n    } else {\n        const currentWeatherDate = getReadableDateTime(chosenLocation.data.dt);\n        currentWeatherDateOutput = `${currentWeatherDate.fullDay}, ${currentWeatherDate.hours}:${currentWeatherDate.minutes}`;\n        const sunriseDate = getReadableDateTime(chosenLocation.data.sys.sunrise);\n        sunriseDateOutput = `${sunriseDate.hours}:${sunriseDate.minutes}`;\n        const sunsetDate = getReadableDateTime(chosenLocation.data.sys.sunset);\n        sunsetDateOutput = `${sunsetDate.hours}:${sunsetDate.minutes}`;\n    }\n\n    return (\n        <div className=\"card__module current-weather\">\n            <h2 className=\"module-title\">{ currentWeatherDateOutput }</h2>\n            <div className=\"info-blocks\">\n                <div className=\"info-block\">\n                    <div className=\"info-block__title\">Temperature:</div>\n                    <div className=\"info-block__value\">{ formatTemperature(chosenLocation.data.main.temp) } <span className=\"info-block__value-sm\">(feels like { formatTemperature(chosenLocation.data.main.feels_like) })</span></div>\n                </div>\n                <div className=\"info-block\">\n                    <div className=\"info-block__title\">Pressure:</div>\n                    <div className=\"info-block__value\">{ chosenLocation.data.main.pressure }</div>\n                </div>\n                <div className=\"info-block\">\n                    <div className=\"info-block__title\">Humidity:</div>\n                    <div className=\"info-block__value\">{ chosenLocation.data.main.humidity }%</div>\n                </div>\n                <div className=\"info-block\">\n                    <div className=\"info-block__title\">Wind:</div>\n                    <div className=\"info-block__value\">{ formatWind(chosenLocation.data.wind) }</div>\n                </div>\n                <div className=\"info-block\">\n                    <div className=\"info-block__title\">Sunrise:</div>\n                    <div className=\"info-block__value\">{ sunriseDateOutput }</div>\n                </div>\n                <div className=\"info-block\">\n                    <div className=\"info-block__title\">Sunset:</div>\n                    <div className=\"info-block__value\">{ sunsetDateOutput }</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CurrentWeather;","import { useSelector } from \"react-redux\";\nimport { getReadableDateTime, formatTemperature, getDailyForecastData } from \"../utils/utils.js\";\n\nfunction Forecast() {\n    const forecast = useSelector(state => state.forecast);\n\n    let dailyForecastData = [];\n\n    if (!forecast.data || forecast.data.cod != 200) {\n        return null;\n    } else {\n        dailyForecastData = getDailyForecastData(forecast.data.list);\n    }\n\n    return (\n        <div className=\"card__module forecast\">\n            <h2 className=\"module-title\">Weekly Forecast</h2>\n\n            <div className=\"days\">\n                {\n                    dailyForecastData.map(item => {\n                        const itemDate = getReadableDateTime(item.dt);\n                        const itemDateOutput = `${itemDate.day}, ${itemDate.date}`;\n                        return (\n                            <div key={item.dt} className=\"day\">\n                                <h3 className=\"day__title\">{ itemDateOutput }</h3>\n                                <div className=\"info-blocks\">\n                                    <div className=\"info-block\">\n                                        <div className=\"info-block__title\">Daytime:</div>\n                                        <div className=\"info-block__value\">{ formatTemperature(item.main.temp) } <br/><span className=\"info-block__value-sm\">(feels like { formatTemperature(item.main.feels_like) })</span></div>\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Forecast;","export default __webpack_public_path__ + \"static/media/cloud-simple.d4345447.svg\";","import preloader from \"../assets/images/cloud-simple.svg\";\n\nfunction Preloader() {\n    return (\n        <div className=\"preloader\">\n            <div className=\"preloader__wrapper\">\n                <img src={preloader} className=\"preloader__filler\" />\n                <img src={preloader} className=\"preloader__filler\" />\n                <div className=\"preloader__containers\">\n                    <div className=\"preloader__container\"></div>\n                    <div className=\"preloader__container\"></div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Preloader;","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\n// components\nimport CurrentWeather from \"../components/CurrentWeather.js\";\nimport Forecast from \"../components/Forecast.js\";\nimport Preloader from \"../components/Preloader.js\"\n\nfunction Card() {\n    const [pageLoaded, setPageLoaded] = useState(false);\n    const chosenLocation = useSelector(state => state.chosenLocation);\n    const forecast = useSelector(state => state.forecast);\n\n    useEffect(() => {\n        // setTimeout(() => {\n            setPageLoaded(true);\n        // }, 200);\n    }, []);\n\n    if (chosenLocation.pending || forecast.pending) {\n        return (\n            <div className=\"page-wrapper\">\n                <div className=\"page-container page-container--center\">\n                    <Preloader />\n                </div>\n            </div>\n        );\n    }\n    if (!chosenLocation.data || !forecast.data) {\n        return <Redirect to=\"/\" />;\n    } else {\n        return (\n            <div className=\"page-wrapper\">\n                <div className=\"page-container\">\n                    <Link to=\"/\" className=\"nav-link\"><span>&larr;</span> search for another location</Link>\n                    <div className={`card animate${pageLoaded ? \" animated\" : \"\"}`}>\n                        <h1 className=\"card__title\">Weather for { chosenLocation.data.name } ({ chosenLocation.data.sys.country }) </h1>\n                        <CurrentWeather />\n                        <Forecast />\n                    </div> \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import './App.scss';\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home.js\";\nimport Card from \"./pages/Card.js\";\n\nfunction App() {\n    return (\n        <div id=\"app\">\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n                <Route exact path=\"/card\">\n                    <Card />\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\n// reducers\nimport chosenLocationReducer from \"./chosenLocation.js\";\nimport forecastReducer from \"./forecast.js\";\nimport userLocationReducer from \"./userLocation.js\"\n\nconst rootReducer = combineReducers({\n    chosenLocation: chosenLocationReducer,\n    forecast: forecastReducer,\n    userLocation: userLocationReducer\n});\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <Router>\n                <App />\n            </Router>\n        </Provider>\n    </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}